// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/fiscal.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiscalServiceClient is the client API for FiscalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiscalServiceClient interface {
	Fiscal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Refund(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	StatusKkt(ctx context.Context, in *RequestStatus, opts ...grpc.CallOption) (*ResponseStatus, error)
}

type fiscalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFiscalServiceClient(cc grpc.ClientConnInterface) FiscalServiceClient {
	return &fiscalServiceClient{cc}
}

func (c *fiscalServiceClient) Fiscal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.FiscalService/Fiscal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiscalServiceClient) Refund(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.FiscalService/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiscalServiceClient) StatusKkt(ctx context.Context, in *RequestStatus, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/service.FiscalService/StatusKkt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiscalServiceServer is the server API for FiscalService service.
// All implementations must embed UnimplementedFiscalServiceServer
// for forward compatibility
type FiscalServiceServer interface {
	Fiscal(context.Context, *Request) (*Response, error)
	Refund(context.Context, *Request) (*Response, error)
	StatusKkt(context.Context, *RequestStatus) (*ResponseStatus, error)
	mustEmbedUnimplementedFiscalServiceServer()
}

// UnimplementedFiscalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFiscalServiceServer struct {
}

func (UnimplementedFiscalServiceServer) Fiscal(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fiscal not implemented")
}
func (UnimplementedFiscalServiceServer) Refund(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedFiscalServiceServer) StatusKkt(context.Context, *RequestStatus) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusKkt not implemented")
}
func (UnimplementedFiscalServiceServer) mustEmbedUnimplementedFiscalServiceServer() {}

// UnsafeFiscalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiscalServiceServer will
// result in compilation errors.
type UnsafeFiscalServiceServer interface {
	mustEmbedUnimplementedFiscalServiceServer()
}

func RegisterFiscalServiceServer(s grpc.ServiceRegistrar, srv FiscalServiceServer) {
	s.RegisterService(&FiscalService_ServiceDesc, srv)
}

func _FiscalService_Fiscal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiscalServiceServer).Fiscal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FiscalService/Fiscal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiscalServiceServer).Fiscal(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiscalService_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiscalServiceServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FiscalService/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiscalServiceServer).Refund(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiscalService_StatusKkt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiscalServiceServer).StatusKkt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FiscalService/StatusKkt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiscalServiceServer).StatusKkt(ctx, req.(*RequestStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// FiscalService_ServiceDesc is the grpc.ServiceDesc for FiscalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiscalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FiscalService",
	HandlerType: (*FiscalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fiscal",
			Handler:    _FiscalService_Fiscal_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _FiscalService_Refund_Handler,
		},
		{
			MethodName: "StatusKkt",
			Handler:    _FiscalService_StatusKkt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fiscal.proto",
}
