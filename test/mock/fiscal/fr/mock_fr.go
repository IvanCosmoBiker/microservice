// Code generated by MockGen. DO NOT EDIT.
// Source: d:/bibikov/commit/microservice/ephorsale/fiscal/interface/fr/interface.go

// Package fr is a generated GoMock package.
package fr

import (
	transaction "ephorservices/ephorsale/transaction/transaction_struct"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFiscal is a mock of Fiscal interface.
type MockFiscal struct {
	ctrl     *gomock.Controller
	recorder *MockFiscalMockRecorder
}

// MockFiscalMockRecorder is the mock recorder for MockFiscal.
type MockFiscalMockRecorder struct {
	mock *MockFiscal
}

// NewMockFiscal creates a new mock instance.
func NewMockFiscal(ctrl *gomock.Controller) *MockFiscal {
	mock := &MockFiscal{ctrl: ctrl}
	mock.recorder = &MockFiscalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiscal) EXPECT() *MockFiscalMockRecorder {
	return m.recorder
}

// GetQrPicture mocks base method.
func (m *MockFiscal) GetQrPicture(data *transaction.Transaction) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQrPicture", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQrPicture indicates an expected call of GetQrPicture.
func (mr *MockFiscalMockRecorder) GetQrPicture(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrPicture", reflect.TypeOf((*MockFiscal)(nil).GetQrPicture), data)
}

// GetQrUrl mocks base method.
func (m *MockFiscal) GetQrUrl(data *transaction.Transaction) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQrUrl", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQrUrl indicates an expected call of GetQrUrl.
func (mr *MockFiscalMockRecorder) GetQrUrl(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrUrl", reflect.TypeOf((*MockFiscal)(nil).GetQrUrl), data)
}

// GetStatus mocks base method.
func (m *MockFiscal) GetStatus(data *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", data)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockFiscalMockRecorder) GetStatus(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockFiscal)(nil).GetStatus), data)
}

// SendCheck mocks base method.
func (m *MockFiscal) SendCheck(data *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCheck", data)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// SendCheck indicates an expected call of SendCheck.
func (mr *MockFiscalMockRecorder) SendCheck(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCheck", reflect.TypeOf((*MockFiscal)(nil).SendCheck), data)
}
