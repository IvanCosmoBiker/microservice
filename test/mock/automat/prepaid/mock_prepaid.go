// Code generated by MockGen. DO NOT EDIT.
// Source: D:\bibikov\commit\microservice\ephorsale\sale\interfaceSale\interface.go

// Package postpaid is a generated GoMock package.
package postpaid

import (
	interfacePayment "ephorservices/ephorsale/payment/interface/payment"
	transaction "ephorservices/ephorsale/transaction/transaction_struct"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSale is a mock of Sale interface.
type MockSale struct {
	ctrl     *gomock.Controller
	recorder *MockSaleMockRecorder
}

// MockSaleMockRecorder is the mock recorder for MockSale.
type MockSaleMockRecorder struct {
	mock *MockSale
}

// NewMockSale creates a new mock instance.
func NewMockSale(ctrl *gomock.Controller) *MockSale {
	mock := &MockSale{ctrl: ctrl}
	mock.recorder = &MockSaleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSale) EXPECT() *MockSaleMockRecorder {
	return m.recorder
}

// Fiscal mocks base method.
func (m *MockSale) Fiscal(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fiscal", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Fiscal indicates an expected call of Fiscal.
func (mr *MockSaleMockRecorder) Fiscal(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fiscal", reflect.TypeOf((*MockSale)(nil).Fiscal), tran)
}

// Payment mocks base method.
func (m *MockSale) Payment(tran *transaction.Transaction) (map[string]interface{}, interfacePayment.Payment) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment", tran)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(interfacePayment.Payment)
	return ret0, ret1
}

// Payment indicates an expected call of Payment.
func (mr *MockSaleMockRecorder) Payment(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockSale)(nil).Payment), tran)
}

// SendMassage mocks base method.
func (m *MockSale) SendMassage(tran *transaction.Transaction, paymenySystem interfacePayment.Payment) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMassage", tran, paymenySystem)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// SendMassage indicates an expected call of SendMassage.
func (mr *MockSaleMockRecorder) SendMassage(tran, paymenySystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMassage", reflect.TypeOf((*MockSale)(nil).SendMassage), tran, paymenySystem)
}

// Start mocks base method.
func (m *MockSale) Start(tran *transaction.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", tran)
}

// Start indicates an expected call of Start.
func (mr *MockSaleMockRecorder) Start(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSale)(nil).Start), tran)
}

// WaitMassage mocks base method.
func (m *MockSale) WaitMassage(tran *transaction.Transaction, paymenySystem interfacePayment.Payment) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMassage", tran, paymenySystem)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// WaitMassage indicates an expected call of WaitMassage.
func (mr *MockSaleMockRecorder) WaitMassage(tran, paymenySystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMassage", reflect.TypeOf((*MockSale)(nil).WaitMassage), tran, paymenySystem)
}
