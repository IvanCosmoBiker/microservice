// Code generated by MockGen. DO NOT EDIT.
// Source: D:\bibikov\commit\microservice\ephorsale\payment\interfacePayment\Interface.go

// Package payment is a generated GoMock package.
package paymentSystem

import (
	transaction "ephorservices/ephorsale/transaction/transaction_struct"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// DebitHoldMoney mocks base method.
func (m *MockPayment) DebitHoldMoney(payment *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitHoldMoney", payment)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// DebitHoldMoney indicates an expected call of DebitHoldMoney.
func (mr *MockPaymentMockRecorder) DebitHoldMoney(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitHoldMoney", reflect.TypeOf((*MockPayment)(nil).DebitHoldMoney), payment)
}

// GetStatusHoldMoney mocks base method.
func (m *MockPayment) GetStatusHoldMoney(payment *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusHoldMoney", payment)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStatusHoldMoney indicates an expected call of GetStatusHoldMoney.
func (mr *MockPaymentMockRecorder) GetStatusHoldMoney(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusHoldMoney", reflect.TypeOf((*MockPayment)(nil).GetStatusHoldMoney), payment)
}

// HoldMoney mocks base method.
func (m *MockPayment) HoldMoney(payment *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldMoney", payment)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// HoldMoney indicates an expected call of HoldMoney.
func (mr *MockPaymentMockRecorder) HoldMoney(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldMoney", reflect.TypeOf((*MockPayment)(nil).HoldMoney), payment)
}

// ReturnMoney mocks base method.
func (m *MockPayment) ReturnMoney(payment *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnMoney", payment)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// ReturnMoney indicates an expected call of ReturnMoney.
func (mr *MockPaymentMockRecorder) ReturnMoney(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnMoney", reflect.TypeOf((*MockPayment)(nil).ReturnMoney), payment)
}

// Timeout mocks base method.
func (m *MockPayment) Timeout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Timeout")
}

// Timeout indicates an expected call of Timeout.
func (mr *MockPaymentMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockPayment)(nil).Timeout))
}
