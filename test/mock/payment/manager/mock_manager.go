// Code generated by MockGen. DO NOT EDIT.
// Source: d:/bibikov/commit/microservice/ephorsale/payment/interfaceManager/interface.go

// Package manager is a generated GoMock package.
package manager

import (
	configs "ephorservices/config"
	interfacePayment "ephorservices/ephorsale/payment/interface/payment"
	transaction "ephorservices/ephorsale/transaction/transaction_struct"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManagerPayment is a mock of ManagerPayment interface.
type MockManagerPayment struct {
	ctrl     *gomock.Controller
	recorder *MockManagerPaymentMockRecorder
}

// MockManagerPaymentMockRecorder is the mock recorder for MockManagerPayment.
type MockManagerPaymentMockRecorder struct {
	mock *MockManagerPayment
}

// NewMockManagerPayment creates a new mock instance.
func NewMockManagerPayment(ctrl *gomock.Controller) *MockManagerPayment {
	mock := &MockManagerPayment{ctrl: ctrl}
	mock.recorder = &MockManagerPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerPayment) EXPECT() *MockManagerPaymentMockRecorder {
	return m.recorder
}

// Debit mocks base method.
func (m *MockManagerPayment) Debit(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debit", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Debit indicates an expected call of Debit.
func (mr *MockManagerPaymentMockRecorder) Debit(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debit", reflect.TypeOf((*MockManagerPayment)(nil).Debit), tran)
}

// GetPaymentOfType mocks base method.
func (m *MockManagerPayment) GetPaymentOfType(tp uint8) (interfacePayment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentOfType", tp)
	ret0, _ := ret[0].(interfacePayment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentOfType indicates an expected call of GetPaymentOfType.
func (mr *MockManagerPaymentMockRecorder) GetPaymentOfType(tp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentOfType", reflect.TypeOf((*MockManagerPayment)(nil).GetPaymentOfType), tp)
}

// Hold mocks base method.
func (m *MockManagerPayment) Hold(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hold", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Hold indicates an expected call of Hold.
func (mr *MockManagerPaymentMockRecorder) Hold(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hold", reflect.TypeOf((*MockManagerPayment)(nil).Hold), tran)
}

// InitPayment mocks base method.
func (m *MockManagerPayment) InitPayment(conf *configs.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitPayment", conf)
}

// InitPayment indicates an expected call of InitPayment.
func (mr *MockManagerPaymentMockRecorder) InitPayment(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitPayment", reflect.TypeOf((*MockManagerPayment)(nil).InitPayment), conf)
}

// Payment mocks base method.
func (m *MockManagerPayment) Payment(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Payment indicates an expected call of Payment.
func (mr *MockManagerPaymentMockRecorder) Payment(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockManagerPayment)(nil).Payment), tran)
}

// Return mocks base method.
func (m *MockManagerPayment) Return(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Return indicates an expected call of Return.
func (mr *MockManagerPaymentMockRecorder) Return(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockManagerPayment)(nil).Return), tran)
}

// Satus mocks base method.
func (m *MockManagerPayment) Satus(tran *transaction.Transaction) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Satus", tran)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Satus indicates an expected call of Satus.
func (mr *MockManagerPaymentMockRecorder) Satus(tran interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Satus", reflect.TypeOf((*MockManagerPayment)(nil).Satus), tran)
}

// SetPayment mocks base method.
func (m *MockManagerPayment) SetPayment(mapPayments map[uint8]interfacePayment.Payment) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayment", mapPayments)
}

// SetPayment indicates an expected call of SetPayment.
func (mr *MockManagerPaymentMockRecorder) SetPayment(mapPayments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayment", reflect.TypeOf((*MockManagerPayment)(nil).SetPayment), mapPayments)
}
